/*
 * Assignatura 21742 - Compiladors
 * Estudis: Grau en Informàtica
 * Itinerari: Computació
 * Curs: 2022 - 2023
 */

package grammar;

import java_cup.runtime.*;
import core.*;

class Parser;
parser code {:
    Chadpp tree;

    public Chadpp getTree(){ return tree; }
:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

terminal        BEGIN, MAIN, ALPHA, CONST, RETURN, INT, BOL, TUP, VOID,
                IF, WHILE, LOOP, AND, OR, PLUS, MINUS, MULT,
                DIV, OUT, ININT, INBOL, EQUAL, REQUAL, LT, GT,
                SEMICOLON, COMMA, LPAREN, RPAREN, LKEY, RKEY, LSKEY,
                RSKEY ;

terminal        String      NUMBER;
terminal        String      ID;
terminal        String      VBOL;

non terminal    Chadpp      CHADPP;
non terminal    Main        MAINFN;
non terminal    L_Decls     DECLS;
non terminal    Decl        DECL;
non terminal    TypeVar     TYPEVAR;
non terminal    Asignation  ASIGNATION;
non terminal    Expresion   EXPRESION;
non terminal    Op          OP;
non terminal    Value       VALUE;
non terminal    Tuple       V_TUP;
non terminal    A_Tuple     A_TUP;
non terminal    CallFn      CALLF;
non terminal    L_Args      ARGS;
non terminal    L_Instrs    INSTRS;
non terminal    Instr       INSTR;
non terminal    L_FArgs     F_ARGS;
non terminal    L_FArgs     F_ARGS2;
non terminal    Functions   FUNCTIONS;
non terminal    Function    FUNCTION;

start with CHADPP;

CHADPP          ::= MAINFN FUNCTIONS;

MAINFN          ::= MAIN LKEY DECLS INSTRS RKEY ;

DECLS           ::= DECL DECLS BEGIN
                |
                ;

DECL            ::= CONST TYPEVAR ASIGNATION
                |   TYPEVAR ASIGNATION
                ;

TYPEVAR         ::= INT
                |   BOL
                |   TUP
                ;

ASIGNATION      ::= ID EQUAL EXPRESION SEMICOLON;

EXPRESION       ::= VALUE OP EXPRESION
                |   VALUE
                ;

OP              ::= PLUS
                |   MINUS
                |   MULT
                |   DIV
                |   REQUAL
                |   LT
                |   GT
                |   AND
                |   OR
//                |   NOT
                ;

VALUE           ::= LPAREN EXPRESION RPAREN // (E)
                |   V_TUP                   // [a,b,c]
                |   A_TUP                   // v[5]
                |   NUMBER                  // 1
                |   VBOL                    // true
                |   CALLF                   // fn()
                |   ID                      // a
                ;

V_TUP           ::= LSKEY ARGS RSKEY; // No se permite []. Al menos debe tener un elemento i.e [A]

A_TUP           ::= ID LSKEY NUMBER RSKEY;

CALLF           ::= ID LPAREN ARGS RPAREN
                |   ID LPAREN RPAREN
                |   ININT LPAREN RPAREN
                |   INBOL LPAREN RPAREN
                ;

ARGS            ::= EXPRESION COMMA ARGS
                |   EXPRESION
                ;

INSTRS          ::= INSTR INSTRS
                |
                ;

INSTR           ::= IF LPAREN EXPRESION RPAREN LKEY INSTRS RKEY
                |   WHILE LPAREN EXPRESION RPAREN LKEY INSTRS RKEY
                |   LOOP LPAREN EXPRESION COMMA EXPRESION RPAREN LKEY INSTRS RKEY
                |   RETURN EXPRESION SEMICOLON
                |   OUT LPAREN EXPRESION RPAREN SEMICOLON
                |   ASIGNATION
                |   CALLF SEMICOLON
                ;

FUNCTIONS        ::= FUNCTION FUNCTIONS
                |
                ;

FUNCTION         ::= TYPEVAR ALPHA ID LPAREN F_ARGS RPAREN LKEY DECLS INSTRS RKEY
                |   VOID ALPHA ID LPAREN F_ARGS RPAREN LKEY DECLS INSTRS RKEY
                ;

F_ARGS          ::= F_ARGS2
                |
                ;

F_ARGS2        ::= TYPEVAR ID COMMA F_ARGS
                |   TYPEVAR ID
                ;