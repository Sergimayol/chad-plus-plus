
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.chpp.grammar;

import com.chpp.core.*;
import com.chpp.core.Number;
import com.chpp.errors.ErrorHandler;
import com.chpp.errors.ErrorCode;
import com.chpp.warnings.WarningCode;
import com.chpp.warnings.WarningHandler;
import com.chpp.utils.Phase;
import com.chpp.semantic.SemanticAnalyzer;
import com.chpp.symbol_table.SymbolTable;
import com.chpp.symbol_table.Symbol;
import com.chpp.symbol_table.StructureType;
import com.chpp.symbol_table.StructureReturnType;
import com.chpp.core.TypeVar;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\002\000\002\003" +
    "\006\000\002\003\005\000\002\004\011\000\002\004\007" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\004\000\002\005\004\000\002\005\003\000\002" +
    "\006\005\000\002\006\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\006\000\002\013\006" +
    "\000\002\033\005\000\002\033\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\020\006\000\002\021\006\000\002\021\005" +
    "\000\002\022\005\000\002\022\003\000\002\023\004\000" +
    "\002\023\002\000\002\024\004\000\002\024\002\000\002" +
    "\026\011\000\002\026\011\000\002\026\013\000\002\026" +
    "\007\000\002\026\006\000\002\026\006\000\002\026\003" +
    "\000\002\026\004\000\002\026\005\000\002\025\011\000" +
    "\002\025\011\000\002\025\013\000\002\025\007\000\002" +
    "\025\006\000\002\025\006\000\002\025\003\000\002\025" +
    "\004\000\002\031\005\000\002\031\002\000\002\032\015" +
    "\000\002\032\013\000\002\032\015\000\002\032\013\000" +
    "\002\027\003\000\002\027\002\000\002\030\006\000\002" +
    "\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\016\005\000\006\000\007\000\011\000\012" +
    "\000\013\000\001\002\000\004\002\317\001\002\000\016" +
    "\005\uffbc\006\000\007\016\011\006\012\013\013\010\001" +
    "\002\000\004\046\ufff3\001\002\000\006\005\uffbc\006\000" +
    "\001\002\000\004\046\ufff1\001\002\000\004\046\020\001" +
    "\002\000\016\005\ufffa\006\ufffa\007\016\011\006\012\013" +
    "\013\010\001\002\000\004\046\ufff2\001\002\000\004\006" +
    "\177\001\002\000\004\005\000\001\002\000\010\011\006" +
    "\012\013\013\010\001\002\000\004\046\020\001\002\000" +
    "\006\031\uffed\036\076\001\002\000\016\005\ufff9\006\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\013\ufff9\001\002\000\004\031" +
    "\023\001\002\000\020\027\030\030\034\037\035\043\025" +
    "\045\027\046\032\047\024\001\002\000\034\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\044\uffdd\001\002\000" +
    "\020\027\030\030\034\037\035\043\025\045\027\046\032" +
    "\047\024\001\002\000\034\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\040\uffdc\044\uffdc\001\002\000\034\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\040\uffde\044\uffde\001\002\000" +
    "\004\037\072\001\002\000\034\020\060\021\070\022\063" +
    "\023\057\024\062\025\064\032\065\033\067\034\066\035" +
    "\uffeb\036\uffeb\040\uffeb\044\uffeb\001\002\000\040\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\045\040\uffd9\043\046" +
    "\044\uffd9\001\002\000\034\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\044\uffdf\001\002\000\004\037\043\001" +
    "\002\000\020\027\030\030\034\037\035\043\025\045\027" +
    "\046\032\047\024\001\002\000\004\035\040\001\002\000" +
    "\034\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\044" +
    "\uffe0\001\002\000\020\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\011\uffef\012\uffef\013\uffef\001\002\000\004\040\042\001" +
    "\002\000\034\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040" +
    "\uffe1\044\uffe1\001\002\000\004\040\044\001\002\000\034" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\044\uffda" +
    "\001\002\000\022\027\030\030\034\037\035\040\052\043" +
    "\025\045\027\046\032\047\024\001\002\000\004\045\047" +
    "\001\002\000\004\044\050\001\002\000\034\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\040\uffd7\044\uffd7\001\002\000" +
    "\004\040\056\001\002\000\034\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\044\uffd5\001\002\000\010\036\054" +
    "\040\uffd3\044\uffd3\001\002\000\020\027\030\030\034\037" +
    "\035\043\025\045\027\046\032\047\024\001\002\000\006" +
    "\040\uffd4\044\uffd4\001\002\000\034\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\044\uffd6\001\002\000\020\027" +
    "\uffe9\030\uffe9\037\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\001\002\000\020\027\uffe3\030\uffe3\037\uffe3\043\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\001\002\000\020\027\030\030\034" +
    "\037\035\043\025\045\027\046\032\047\024\001\002\000" +
    "\020\027\uffe8\030\uffe8\037\uffe8\043\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\001\002\000\020\027\uffea\030\uffea\037\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\001\002\000\020\027\uffe7" +
    "\030\uffe7\037\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\001" +
    "\002\000\020\027\uffe6\030\uffe6\037\uffe6\043\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\001\002\000\020\027\uffe4\030\uffe4\037" +
    "\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\001\002\000\020" +
    "\027\uffe5\030\uffe5\037\uffe5\043\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\001\002\000\020\027\uffe2\030\uffe2\037\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\001\002\000\012\035\uffec\036" +
    "\uffec\040\uffec\044\uffec\001\002\000\004\040\073\001\002" +
    "\000\034\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb" +
    "\044\uffdb\001\002\000\004\044\075\001\002\000\034\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\044\uffd8\001" +
    "\002\000\004\046\020\001\002\000\004\031\uffee\001\002" +
    "\000\004\002\ufffe\001\002\000\004\005\102\001\002\000" +
    "\004\041\103\001\002\000\032\007\120\011\006\012\013" +
    "\013\010\015\110\016\106\017\107\026\122\027\121\030" +
    "\114\042\uffd1\046\111\001\002\000\004\046\020\001\002" +
    "\000\022\015\uffbf\016\uffbf\017\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\042\uffbf\046\uffbf\001\002\000\004\037\170\001\002" +
    "\000\004\037\160\001\002\000\004\037\152\001\002\000" +
    "\010\031\uffed\036\076\037\045\001\002\000\004\004\147" +
    "\001\002\000\022\015\110\016\106\017\107\026\122\027" +
    "\121\030\114\042\uffd1\046\111\001\002\000\004\037\143" +
    "\001\002\000\004\035\142\001\002\000\004\031\137\001" +
    "\002\000\014\004\ufff6\007\120\011\006\012\013\013\010" +
    "\001\002\000\010\011\006\012\013\013\010\001\002\000" +
    "\004\037\131\001\002\000\004\037\125\001\002\000\004" +
    "\042\124\001\002\000\004\002\ufffc\001\002\000\020\027" +
    "\030\030\034\037\035\043\025\045\027\046\032\047\024" +
    "\001\002\000\004\040\127\001\002\000\004\035\130\001" +
    "\002\000\022\015\uffc2\016\uffc2\017\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\042\uffc2\046\uffc2\001\002\000\004\040\132\001" +
    "\002\000\004\035\133\001\002\000\022\015\uffc1\016\uffc1" +
    "\017\uffc1\026\uffc1\027\uffc1\030\uffc1\042\uffc1\046\uffc1\001" +
    "\002\000\004\046\020\001\002\000\014\004\ufff5\007\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\001\002\000\004\004\ufff7\001" +
    "\002\000\020\027\030\030\034\037\035\043\025\045\027" +
    "\046\032\047\024\001\002\000\004\035\141\001\002\000" +
    "\024\010\ufff0\015\ufff0\016\ufff0\017\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\042\ufff0\046\ufff0\001\002\000\022\015\uffbe\016" +
    "\uffbe\017\uffbe\026\uffbe\027\uffbe\030\uffbe\042\uffbe\046\uffbe" +
    "\001\002\000\004\040\144\001\002\000\004\035\145\001" +
    "\002\000\022\015\uffc0\016\uffc0\017\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\042\uffc0\046\uffc0\001\002\000\004\042\uffd2\001" +
    "\002\000\022\015\110\016\106\017\107\026\122\027\121" +
    "\030\114\042\uffd1\046\111\001\002\000\004\042\151\001" +
    "\002\000\004\002\ufffd\001\002\000\020\027\030\030\034" +
    "\037\035\043\025\045\027\046\032\047\024\001\002\000" +
    "\004\040\154\001\002\000\004\041\155\001\002\000\022" +
    "\015\110\016\106\017\107\026\122\027\121\030\114\042" +
    "\uffd1\046\111\001\002\000\004\042\157\001\002\000\022" +
    "\015\uffc5\016\uffc5\017\uffc5\026\uffc5\027\uffc5\030\uffc5\042" +
    "\uffc5\046\uffc5\001\002\000\020\027\030\030\034\037\035" +
    "\043\025\045\027\046\032\047\024\001\002\000\004\036" +
    "\162\001\002\000\020\027\030\030\034\037\035\043\025" +
    "\045\027\046\032\047\024\001\002\000\004\040\164\001" +
    "\002\000\004\041\165\001\002\000\022\015\110\016\106" +
    "\017\107\026\122\027\121\030\114\042\uffd1\046\111\001" +
    "\002\000\004\042\167\001\002\000\022\015\uffc3\016\uffc3" +
    "\017\uffc3\026\uffc3\027\uffc3\030\uffc3\042\uffc3\046\uffc3\001" +
    "\002\000\020\027\030\030\034\037\035\043\025\045\027" +
    "\046\032\047\024\001\002\000\004\040\172\001\002\000" +
    "\004\041\173\001\002\000\022\015\110\016\106\017\107" +
    "\026\122\027\121\030\114\042\uffd1\046\111\001\002\000" +
    "\004\042\175\001\002\000\022\015\uffc4\016\uffc4\017\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\042\uffc4\046\uffc4\001\002\000" +
    "\014\004\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4\001\002" +
    "\000\012\011\006\012\013\013\010\014\203\001\002\000" +
    "\006\005\uffbc\006\000\001\002\000\004\005\uffbd\001\002" +
    "\000\004\046\224\001\002\000\004\046\204\001\002\000" +
    "\004\037\205\001\002\000\012\011\006\012\013\013\010" +
    "\040\uffb6\001\002\000\004\040\214\001\002\000\004\040" +
    "\uffb7\001\002\000\004\046\211\001\002\000\006\036\212" +
    "\040\uffb4\001\002\000\010\011\006\012\013\013\010\001" +
    "\002\000\004\040\uffb5\001\002\000\004\041\215\001\002" +
    "\000\032\007\120\011\006\012\013\013\010\015\110\016" +
    "\106\017\107\026\122\027\121\030\114\042\uffd1\046\111" +
    "\001\002\000\004\004\221\001\002\000\004\042\220\001" +
    "\002\000\006\005\uffb8\006\uffb8\001\002\000\022\015\110" +
    "\016\106\017\107\026\122\027\121\030\114\042\uffd1\046" +
    "\111\001\002\000\004\042\223\001\002\000\006\005\uffb9" +
    "\006\uffb9\001\002\000\004\037\225\001\002\000\012\011" +
    "\006\012\013\013\010\040\uffb6\001\002\000\004\040\227" +
    "\001\002\000\004\041\230\001\002\000\034\007\120\010" +
    "\235\011\006\012\013\013\010\015\236\016\232\017\233" +
    "\026\244\027\243\030\240\042\uffcf\046\111\001\002\000" +
    "\024\010\uffc8\015\uffc8\016\uffc8\017\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\042\uffc8\046\uffc8\001\002\000\004\037\305\001" +
    "\002\000\004\037\275\001\002\000\004\042\274\001\002" +
    "\000\020\027\030\030\034\037\035\043\025\045\027\046" +
    "\032\047\024\001\002\000\004\037\264\001\002\000\004" +
    "\004\261\001\002\000\004\037\256\001\002\000\004\035" +
    "\255\001\002\000\024\010\235\015\236\016\232\017\233" +
    "\026\244\027\243\030\240\042\uffcf\046\111\001\002\000" +
    "\004\037\251\001\002\000\004\037\245\001\002\000\020" +
    "\027\030\030\034\037\035\043\025\045\027\046\032\047" +
    "\024\001\002\000\004\040\247\001\002\000\004\035\250" +
    "\001\002\000\024\010\uffcb\015\uffcb\016\uffcb\017\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\042\uffcb\046\uffcb\001\002\000\004" +
    "\040\252\001\002\000\004\035\253\001\002\000\024\010" +
    "\uffca\015\uffca\016\uffca\017\uffca\026\uffca\027\uffca\030\uffca" +
    "\042\uffca\046\uffca\001\002\000\004\042\uffd0\001\002\000" +
    "\024\010\uffc7\015\uffc7\016\uffc7\017\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\042\uffc7\046\uffc7\001\002\000\004\040\257\001" +
    "\002\000\004\035\260\001\002\000\024\010\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\026\uffc9\027\uffc9\030\uffc9\042\uffc9\046" +
    "\uffc9\001\002\000\024\010\235\015\236\016\232\017\233" +
    "\026\244\027\243\030\240\042\uffcf\046\111\001\002\000" +
    "\004\042\263\001\002\000\006\005\uffbb\006\uffbb\001\002" +
    "\000\020\027\030\030\034\037\035\043\025\045\027\046" +
    "\032\047\024\001\002\000\004\040\266\001\002\000\004" +
    "\041\267\001\002\000\024\010\235\015\236\016\232\017" +
    "\233\026\244\027\243\030\240\042\uffcf\046\111\001\002" +
    "\000\004\042\271\001\002\000\024\010\uffce\015\uffce\016" +
    "\uffce\017\uffce\026\uffce\027\uffce\030\uffce\042\uffce\046\uffce" +
    "\001\002\000\004\035\273\001\002\000\024\010\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\026\uffc6\027\uffc6\030\uffc6\042\uffc6" +
    "\046\uffc6\001\002\000\006\005\uffba\006\uffba\001\002\000" +
    "\020\027\030\030\034\037\035\043\025\045\027\046\032" +
    "\047\024\001\002\000\004\036\277\001\002\000\020\027" +
    "\030\030\034\037\035\043\025\045\027\046\032\047\024" +
    "\001\002\000\004\040\301\001\002\000\004\041\302\001" +
    "\002\000\024\010\235\015\236\016\232\017\233\026\244" +
    "\027\243\030\240\042\uffcf\046\111\001\002\000\004\042" +
    "\304\001\002\000\024\010\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\042\uffcc\046\uffcc\001\002\000" +
    "\020\027\030\030\034\037\035\043\025\045\027\046\032" +
    "\047\024\001\002\000\004\040\307\001\002\000\004\041" +
    "\310\001\002\000\024\010\235\015\236\016\232\017\233" +
    "\026\244\027\243\030\240\042\uffcf\046\111\001\002\000" +
    "\004\042\312\001\002\000\024\010\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\026\uffcd\027\uffcd\030\uffcd\042\uffcd\046\uffcd\001" +
    "\002\000\006\005\ufffb\006\ufffb\001\002\000\016\005\ufff8" +
    "\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\001\002\000" +
    "\004\005\000\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\014\002\013\007\006\010\011\011\010\031\014" +
    "\001\001\000\002\001\001\000\006\002\013\031\314\001" +
    "\001\000\002\001\001\000\006\013\313\033\021\001\001" +
    "\000\010\007\312\010\011\011\010\001\001\000\002\001" +
    "\001\000\004\032\177\001\001\000\006\002\100\004\077" +
    "\001\001\000\004\011\016\001\001\000\006\013\020\033" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\035\016\030\017\036\020\032\021" +
    "\025\001\001\000\002\001\001\000\016\014\052\016\030" +
    "\017\036\020\032\021\025\022\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\040\016\030\017\036\020\032\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\052\016\030\017\036\020" +
    "\032\021\025\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\052\016\030\017\036" +
    "\020\032\021\025\022\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\070\016\030\017\036\020\032\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\111\006\116\011\103\012" +
    "\104\021\114\023\122\025\112\033\115\001\001\000\006" +
    "\013\175\033\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\104\021\114\023\145\025" +
    "\112\033\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\135\006\116\011\103\001" +
    "\001\000\004\011\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\125\016\030\017\036\020\032\021\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\134" +
    "\033\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\137\016\030\017\036\020\032\021\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\104\021\114\023\147\025\112\033" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\152\016\030\017\036\020\032\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\104\021\114" +
    "\023\155\025\112\033\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\160\016\030\017\036\020\032" +
    "\021\025\001\001\000\002\001\001\000\014\014\162\016" +
    "\030\017\036\020\032\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\104\021\114\023\165\025" +
    "\112\033\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\170\016\030\017\036\020\032\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\104" +
    "\021\114\023\173\025\112\033\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\201" +
    "\001\001\000\006\002\013\031\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\207\027\205\030\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\207\030\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\215\006\116\011\103\012\104" +
    "\021\114\023\216\025\112\033\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\104" +
    "\021\114\023\221\025\112\033\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\207" +
    "\027\225\030\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\236\006\116\011\103\012\230\021\240" +
    "\024\233\026\241\033\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\271\016\030\017\036\020\032\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\230\021\240\024\253\026\241\033" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\245\016\030\017\036\020\032\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\230\021\240\024\261\026" +
    "\241\033\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\264\016\030\017\036\020\032\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\230" +
    "\021\240\024\267\026\241\033\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\275\016\030\017\036\020" +
    "\032\021\025\001\001\000\002\001\001\000\014\014\277" +
    "\016\030\017\036\020\032\021\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\230\021\240\024\302" +
    "\026\241\033\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\305\016\030\017\036\020\032\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\230\021\240\024\310\026\241\033\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\100\004\315\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Chadpp tree;
    SymbolTable st = new SymbolTable();
    SemanticAnalyzer sem = new SemanticAnalyzer(st);

    public Chadpp getTree(){ return tree; }
    public SymbolTable getSymbolTable(){ return st; }
    public SemanticAnalyzer getSemanticAnalyzer(){ return sem; }

    private StructureReturnType typeVartoReturnType(TypeVar tp){
        switch(tp.name()){
            case "INT":
                return StructureReturnType.INT;
            case "BOOL":
                return StructureReturnType.BOOL;
            case "TUP":
                return StructureReturnType.TUP;
            default:
                return StructureReturnType.VOID;
        }
    }


    private boolean addTupleContentstoST(Asignation assig){
        if (assig.getExpresion().getOp() != null || assig.getExpresion().getNextExpresion() != null) {
        // ERROR -> only allowed to set tuples alone
        ErrorHandler.addError(ErrorCode.SET_TUPLES_ONLY_ALONE,
            assig.getExpresion().getLine(),
            assig.getExpresion().getColumn(),
            Phase.SEMANTIC);
        }
        // Revisamos que la asignación de la tupla sea un id
        if (!assig.getExpresion().getValue().getCurrentInstance().equals("Tuple")) {
        return false;
        }
        ArrayList<Symbol> content = new ArrayList<>();
        L_Args tupCont = assig.getExpresion().getValue().getTuple().getTupleContent();

        for (L_Args arg = tupCont; arg != null; arg = arg.getNextArg()) {
            Value value = arg.getArg().getValue();

            switch (value.getCurrentInstance()) {
                case "Number": // int
                content.add(new Symbol("Number" + value.getNumber().getLine() + "_" + value.getNumber().getColumn(),
                    StructureType.VALUE, StructureReturnType.INT, null, false, true, value.getNumber().getLine()));
                break;
                case "Bol":
                content.add(new Symbol("BOL" + value.getBol().getLine() + "_" + value.getBol().getColumn(),
                    StructureType.VALUE, StructureReturnType.BOOL, null, false, true, value.getBol().getLine()));
                break;
                case "Id": // ts -> type
                // SEMANTIC -> check id returns Structure type
                StructureReturnType idReturnType = sem.checkId(value.getId());
                if (idReturnType == null) {
                    // ERROR -> ID NOT DECLARED
                    ErrorHandler.addError(ErrorCode.ID_NOT_DECLARED_OR_NOT_FOUND,
                        value.getId().getLine(),
                        value.getId().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                if (idReturnType.equals(StructureReturnType.TUP)) {
                    ErrorHandler.addError(ErrorCode.SET_TUPLES_ONLY_ALONE,
                        assig.getExpresion().getLine(),
                        assig.getExpresion().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                content.add(new Symbol(value.getId().getValue(), StructureType.VALUE, idReturnType, null, false, true,
                    value.getId().getLine()));
                break;
                case "A_Tuple": // ts -> check if the index exists
                // Debido a que se ha tenido que crear la tupla, sabemos que los
                // elementos de esta son "legales" y por lo tanto solo tenemos que
                // revisar si existe tal parametro
                if (st.getSymbol(value.getaTuple().getId().getValue()).getStructureType()
                        .equals(StructureType.PARAMETER)) {
                    // WARNING: parameter not known at compile time, results may differ
                    WarningHandler.addWarning(WarningCode.VARIABLE_CONTENT_NOT_KNOWN_AT_COMPILE_TIME,
                            value.getaTuple().getId().getLine(),
                            value.getaTuple().getId().getColumn(),
                            Phase.SEMANTIC);
                    break;
                }
                Symbol nTupleArg = st.getNTupleArgument(value.getaTuple().getId().getValue(),
                    value.getaTuple().getAccess().getValue());
                if (nTupleArg == null) { // No existe tal parametro -> error
                    ErrorHandler.addError(ErrorCode.TUPLE_INDEX_OUT_OF_BOUNDS,
                        value.getaTuple().getLine(),
                        value.getaTuple().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                content.add(new Symbol(nTupleArg.getName(), StructureType.VALUE, nTupleArg.getStructureReturnType(), null,
                    false, true, value.getaTuple().getLine()));
                break;
                case "Input": // input -> type
                String inputType = value.getInput().getType() == 0 ? "int" : "bol";
                if (inputType.equals("int")) {
                    content
                        .add(new Symbol("Input" + inputType + value.getInput().getLine() + "_" + value.getInput().getColumn(),
                            StructureType.VALUE, StructureReturnType.INT, null, false, true, value.getInput().getLine()));
                } else {
                    content
                        .add(new Symbol("Input" + inputType + value.getInput().getLine() + "_" + value.getInput().getColumn(),
                            StructureType.VALUE, StructureReturnType.BOOL, null, false, true, value.getInput().getLine()));
                }
                break;
                case "Expresion": // sem -> checkExp
                StructureReturnType returnedExpresionType = sem.checkExpresion(value.getExpresion());
                if (returnedExpresionType == null) {
                    // ERROR EXPRESION IS MALFORMED
                    ErrorHandler.addError(ErrorCode.MALFORMED_EXPRESSION,
                        value.getExpresion().getLine(),
                        value.getExpresion().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                switch (returnedExpresionType.name()) {
                    case "INT":
                    content
                        .add(new Symbol(
                            "Expresion" + value.getExpresion().getLine() + "_" + value.getExpresion().getColumn(),
                            StructureType.VALUE, StructureReturnType.INT, null, false, true,
                            value.getExpresion().getLine()));
                    break;
                    case "BOOL":
                    content.add(new Symbol(
                        "Expresion" + value.getExpresion().getLine() + "_" + value.getExpresion().getColumn(),
                        StructureType.VALUE, StructureReturnType.BOOL, null, false, true, value.getExpresion().getLine()));
                    break;
                    default:
                    // ERROR UNSUPORTED EXPRESION TYPE
                    ErrorHandler.addError(ErrorCode.UNSUPPORTED_EXPRESSION_TYPE,
                        value.getExpresion().getLine(),
                        value.getExpresion().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                break;
                case "Tuple": // Error
                // We don't allow tuples inside tuples
                ErrorHandler.addError(ErrorCode.TUPLE_CAN_NOT_CONTAIN_TUPLE,
                    arg.getArg().getValue().getTuple().getLine(),
                    arg.getArg().getValue().getTuple().getColumn(),
                    Phase.SEMANTIC);
                return false;
                case "CallFn":
                // Revisar si existe el Id
                Symbol fn = st.getFunction(value.getCallFn().getId().getValue());
                if (fn == null) {
                    ErrorHandler.addError(ErrorCode.UNDECLARED_FUNCTION,
                        value.getCallFn().getLine(),
                        value.getCallFn().getColumn(),
                        Phase.SEMANTIC);
                    return false;
                }
                // comprobar el tipo de return de la función
                switch(fn.getStructureReturnType()){
                    case TUP:
                        // si retorna tuple -> error
                        ErrorHandler.addError(ErrorCode.RETURN_TYPE_TUPLE_IN_TUPLE,
                            value.getCallFn().getLine(),
                            value.getCallFn().getColumn(),
                            Phase.SEMANTIC);
                        return false;
                    case VOID:
                    // ERROR: Cannot asign value of an void declared function
                        ErrorHandler.addError(ErrorCode.CANNOT_ASSIGN_VALUE_OF_VOID_FUNCTION,
                            value.getCallFn().getLine(),
                            value.getCallFn().getColumn(),
                            Phase.SEMANTIC);
                        return false;
                    default:
                        break;
                }
                if (!sem.checkCallFArgs(value.getCallFn())) {
                    return false;
                }
                content.add(new Symbol(
                    "CallFn" + value.getCallFn().getId() + value.getCallFn().getLine() + "_"
                        + value.getCallFn().getColumn(),
                    StructureType.VALUE, fn.getStructureReturnType(), null, false, true, value.getCallFn().getLine()));
                break;
                default:
                // ERROR -> unsupported element
                ErrorHandler.addError(ErrorCode.UNSUPPORTED_ELEMENT,
                    value.getNumber().getLine(),
                    value.getNumber().getColumn(),
                    Phase.SEMANTIC);
                return false;
            }
        }

        // Coger todos los ids
        for (L_Ids l_ids = assig.getL_Ids(); l_ids != null; l_ids = l_ids.nextId()) {
            Symbol symbol = st.getSymbol(l_ids.getId());
            if (symbol == null) {
                // ERROR -> variable not declared
                ErrorHandler.addError(ErrorCode.UNDECLARED_VARIABLE,
                    l_ids.getLine(),
                    l_ids.getColumn(),
                    Phase.SEMANTIC);
                return false;
            }
            // Una vez encontrado, usar setContent para poner el contenido respectico a la
            // tupla
            symbol.setContent(content);
        }

        return true;
    }

        /**
     * Override syntax error to use custom message and error handling
     *
     * @param cur_token
     */
    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        String message = "Got " + cur_token.toString().split(" ")[1] + " and expected " + this.showExpectedTokenIds();
        this.report_error(message, cur_token);
    }


    /**
     * Use custom add error function
     *
     * @param message
     * @param token
     */
    @Override
    public void report_error(String message, Object token) {
        ErrorHandler.addError(message, ((java_cup.runtime.Symbol) token).left, -1 , Phase.SYNTACTIC);
    }

    /**
     * Ignore fatal errors
     *
     * @param message
     * @param info
     */
    @Override
    public void report_fatal_error(String message, Object info) {}

    /**
     *
     *
     * @return String with all the expected tokens for the current token
     */
    private String showExpectedTokenIds() {
        List<String> list = this.expected_token_ids().stream().map(this::symbl_name_from_id).toList();
        return (list.size() > 0) ? list.toString() : "something else";
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CHADPP EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Chadpp start_val = (Chadpp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // M ::= 
            {
              Object RESULT =null;
		 st.addAccess(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CHADPP ::= M GDECLS FUNCTIONS MAINFN 
            {
              Chadpp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		L_Decls d = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Fn fun = (L_Fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tree = new Chadpp(d, main, fun, 0, 0);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHADPP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CHADPP ::= M FUNCTIONS MAINFN 
            {
              Chadpp RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Fn fun = (L_Fn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Main main = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 tree = new Chadpp(null, main, fun, 0, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHADPP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAINFN ::= M MAIN LKEY DECLS BEGIN INSTRS RKEY 
            {
              Main RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		L_Decls decls = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs i = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main(decls, i, declsleft,declsright );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAINFN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAINFN ::= M MAIN LKEY INSTRS RKEY 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs i = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Main(null, i, ileft, iright);         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAINFN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GDECLS ::= GDECL GDECLS 
            {
              L_Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Decls ld = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Decls(d, ld, dleft, dright);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GDECLS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GDECLS ::= GDECL 
            {
              L_Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Decls(d, dleft, dright);            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GDECLS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GDECL ::= CONST TYPEVAR DASIGNATION 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation assig = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        for(L_Ids l_id = assig.getL_Ids(); l_id != null; l_id = l_id.nextId()){
                            if (!st.addSymbol(new Symbol(l_id.getId(), StructureType.VARIABLE , typeVartoReturnType(type), null, true, true, typeleft))){
                                // ERROR -> variable already declared
                                ErrorHandler.addError(ErrorCode.DUPLICATED_VARIABLE,
                                l_id.getLine(),
                                l_id.getColumn(),
                                Phase.SEMANTIC);
                            };
                        };
                        if(typeVartoReturnType(type).equals(StructureReturnType.TUP)){
                            // Vamos añadiendo los elementos al contenido del simbolo
                            addTupleContentstoST(assig);
                        };
                        sem.checkAsignation(assig, true);
                        RESULT = new Decl(true, type, assig, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GDECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GDECL ::= TYPEVAR DASIGNATION 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation assig = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        for(L_Ids l_id = assig.getL_Ids(); l_id != null; l_id = l_id.nextId()){
                            // Las tuplas definidas globalmente son constantes
                            boolean constantTuple = type.equals(TypeVar.TUP);
                            if(!st.addSymbol(new Symbol(l_id.getId(), StructureType.VARIABLE , typeVartoReturnType(type), null, true, constantTuple, typeleft))){
                                // ERROR -> variable already declared
                                ErrorHandler.addError(ErrorCode.DUPLICATED_VARIABLE,
                                l_id.getLine(),
                                l_id.getColumn(),
                                Phase.SEMANTIC);
                            };
                        };

                        if(typeVartoReturnType(type).equals(StructureReturnType.TUP)){
                            // Vamos añadiendo los elementos al contenido del simbolo
                            addTupleContentstoST(assig);
                        };

                        sem.checkAsignation(assig, true);
                        RESULT = new Decl(false, type, assig, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GDECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLS ::= DECL DECLS 
            {
              L_Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Decls ld = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Decls(d, ld, dleft, dright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLS ::= DECL 
            {
              L_Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Decls(d, dleft, dright);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL ::= CONST TYPEVAR DASIGNATION 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation assig = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        for(L_Ids l_id = assig.getL_Ids(); l_id != null; l_id = l_id.nextId()){
                            if(!st.addSymbol(new Symbol(l_id.getId(), StructureType.VARIABLE , typeVartoReturnType(type), null, false, true, typeleft))){
                                ErrorHandler.addError(ErrorCode.DUPLICATED_VARIABLE,
                                l_id.getLine(),
                                l_id.getColumn(),
                                Phase.SEMANTIC);
                            };
                        };
                        if(typeVartoReturnType(type).equals(StructureReturnType.TUP)) {
                            // Vamos añadiendo los elementos al contenido del simbolo
                            addTupleContentstoST(assig);
                        };
                        sem.checkAsignation(assig, true);
                        RESULT = new Decl(true, type, assig, typeleft, typeright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL ::= TYPEVAR DASIGNATION 
            {
              Decl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation assig = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            for(L_Ids l_id = assig.getL_Ids(); l_id != null; l_id = l_id.nextId()){
                                if(!st.addSymbol(new Symbol(l_id.getId(), StructureType.VARIABLE , typeVartoReturnType(type), null, false, false, typeleft))){
                                    // ERROR -> variable already declared
                                    ErrorHandler.addError(ErrorCode.DUPLICATED_VARIABLE,
                                    l_id.getLine(),
                                    l_id.getColumn(),
                                    Phase.SEMANTIC);
                                };
                            };
                            if(typeVartoReturnType(type).equals(StructureReturnType.TUP)){
                                // Vamos añadiendo los elementos al contenido del simbolo
                                addTupleContentstoST(assig);
                            };
                            sem.checkAsignation(assig, true);
                            RESULT = new Decl(false, type, assig, typeleft, typeright);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TYPEVAR ::= INT 
            {
              TypeVar RESULT =null;
		 RESULT = TypeVar.INT;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEVAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPEVAR ::= BOL 
            {
              TypeVar RESULT =null;
		 RESULT = TypeVar.BOOL;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEVAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPEVAR ::= TUP 
            {
              TypeVar RESULT =null;
		 RESULT = TypeVar.TUP;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEVAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNATION ::= LID EQUAL EXPRESION SEMICOLON 
            {
              Asignation RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		L_Ids lid = (L_Ids)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = new Asignation(lid, e, lidleft, lidright);
                            // Mirar el primer id de lids Ver si es una tupla
                            if (st.searchSymbolAtAccess(st.getTaIndex(), lid.getId()).getStructureReturnType()
                                .equals(StructureReturnType.TUP)) {
                                // Si lo es llamamos a addtupleContents con RESULT
                                addTupleContentstoST(RESULT);
                            }
                            sem.checkAsignation(RESULT, false);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DASIGNATION ::= LID EQUAL EXPRESION SEMICOLON 
            {
              Asignation RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		L_Ids lid = (L_Ids)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Asignation(lid, e, lidleft, lidright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DASIGNATION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LID ::= ID COMMA LID 
            {
              L_Ids RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Ids lid = (L_Ids)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Ids(id, lid, idleft, idright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LID ::= ID 
            {
              L_Ids RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Ids(id, idleft, idright);         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LID",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= VALUE OP EXPRESION 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Op op = (Op)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(v, e, op, vleft, vright); ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= VALUE 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Value v = (Value)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(v, vleft, vright);        ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP ::= PLUS 
            {
              Op RESULT =null;
		 RESULT = Op.PLUS;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP ::= MINUS 
            {
              Op RESULT =null;
		 RESULT = Op.MINUS;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP ::= MULT 
            {
              Op RESULT =null;
		 RESULT = Op.MULT;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP ::= DIV 
            {
              Op RESULT =null;
		 RESULT = Op.DIV;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP ::= REQUAL 
            {
              Op RESULT =null;
		 RESULT = Op.REQUAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP ::= LT 
            {
              Op RESULT =null;
		 RESULT = Op.LT;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP ::= GT 
            {
              Op RESULT =null;
		 RESULT = Op.GT;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP ::= AND 
            {
              Op RESULT =null;
		 RESULT = Op.AND;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP ::= OR 
            {
              Op RESULT =null;
		 RESULT = Op.OR;     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUE ::= LPAREN EXPRESION RPAREN 
            {
              Value RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Value(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUE ::= V_TUP 
            {
              Value RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tuple v = (Tuple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUE ::= A_TUP 
            {
              Value RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		A_Tuple a = (A_Tuple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE ::= NUMBER 
            {
              Value RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value("Number", n, nleft, nright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE ::= VBOL 
            {
              Value RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value("Bol", b, bleft, bright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUE ::= CALLF 
            {
              Value RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallFn call = (CallFn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value(call); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUE ::= ININT LPAREN RPAREN 
            {
              Value RESULT =null;
		 RESULT = new Value(new Input(0, cur_token.left, cur_token.right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE ::= INBOL LPAREN RPAREN 
            {
              Value RESULT =null;
		 RESULT = new Value(new Input(1, cur_token.left, cur_token.right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUE ::= ID 
            {
              Value RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Value("Id", id, idleft, idright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // V_TUP ::= LSKEY ARGS RSKEY 
            {
              Tuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Args a = (L_Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Tuple(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V_TUP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // A_TUP ::= ID LSKEY NUMBER RSKEY 
            {
              A_Tuple RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new A_Tuple(new Id(id, idleft, idright), new Number(num, numleft, numright), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_TUP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CALLF ::= ID LPAREN ARGS RPAREN 
            {
              CallFn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Args args = (L_Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallFn(new Id(id, idleft, idright), args, cur_token.left, cur_token.right); sem.checkCallFArgs(RESULT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CALLF ::= ID LPAREN RPAREN 
            {
              CallFn RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallFn(new Id(id, idleft, idright), cur_token.left, cur_token.right);       sem.checkCallFArgs(RESULT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGS ::= EXPRESION COMMA ARGS 
            {
              L_Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Args args = (L_Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sem.checkExp(e); RESULT = new L_Args(e, args, eleft, eright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGS ::= EXPRESION 
            {
              L_Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sem.checkExp(e); RESULT = new L_Args(e, eleft, eright);      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRS ::= INSTR INSTRS 
            {
              L_Instrs RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr inst = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Instrs(inst, instrs, instleft, instright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRS ::= 
            {
              L_Instrs RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // R_INSTRS ::= R_INSTR R_INSTRS 
            {
              L_Instrs RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instr inst = (Instr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Instrs(inst, instrs, instleft, instright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTRS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // R_INSTRS ::= 
            {
              L_Instrs RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTRS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // R_INSTR ::= IF LPAREN EXPRESION RPAREN LKEY R_INSTRS RKEY 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLogicalExpresion(e);RESULT = new Instr(new IfNode(e, instrs, eleft, eright), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // R_INSTR ::= WHILE LPAREN EXPRESION RPAREN LKEY R_INSTRS RKEY 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLogicalExpresion(e);RESULT = new Instr(new WhileNode(e, instrs, eleft, eright), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // R_INSTR ::= LOOP LPAREN EXPRESION COMMA EXPRESION RPAREN LKEY R_INSTRS RKEY 
            {
              Instr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLoop(e1,e2); RESULT = new Instr(new LoopNode(e1, e2, instrs, e1left, e1right), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // R_INSTR ::= OUT LPAREN EXPRESION RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 sem.checkExp(e);RESULT = new Instr(new Output(e, eleft , eright), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // R_INSTR ::= ININT LPAREN RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		 RESULT = new Instr(new Input(0, cur_token.left , cur_token.right), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // R_INSTR ::= INBOL LPAREN RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		 RESULT = new Instr(new Input(1, cur_token.left , cur_token.right), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // R_INSTR ::= ASIGNATION 
            {
              Instr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation a = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instr(a, aleft , aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // R_INSTR ::= CALLF SEMICOLON 
            {
              Instr RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallFn fn = (CallFn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instr(fn, fnleft , fnright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // R_INSTR ::= RETURN EXPRESION SEMICOLON 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        st.addSymbol(new Symbol("Return" + eleft + "_" + eright, StructureType.RETURN, sem.checkReturnValue(e), null, false, false, eleft));
                        RESULT = new Instr(new ReturnNode(e, eleft , eright), cur_token.left , cur_token.right);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R_INSTR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTR ::= IF LPAREN EXPRESION RPAREN LKEY INSTRS RKEY 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLogicalExpresion(e);RESULT = new Instr(new IfNode(e, instrs, eleft, eright), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTR ::= WHILE LPAREN EXPRESION RPAREN LKEY INSTRS RKEY 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLogicalExpresion(e);RESULT = new Instr(new WhileNode(e, instrs, eleft, eright), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTR ::= LOOP LPAREN EXPRESION COMMA EXPRESION RPAREN LKEY INSTRS RKEY 
            {
              Instr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 sem.checkLoop(e1,e2); RESULT = new Instr(new LoopNode(e1, e2, instrs, e1left, e1right), cur_token.left, cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTR ::= OUT LPAREN EXPRESION RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 sem.checkExp(e);RESULT = new Instr(new Output(e, eleft , eright), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTR ::= ININT LPAREN RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		 RESULT = new Instr(new Input(0, cur_token.left , cur_token.right), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INSTR ::= INBOL LPAREN RPAREN SEMICOLON 
            {
              Instr RESULT =null;
		 RESULT = new Instr(new Input(1, cur_token.left , cur_token.right), cur_token.left , cur_token.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTR ::= ASIGNATION 
            {
              Instr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignation a = (Asignation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instr(a, aleft , aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTR ::= CALLF SEMICOLON 
            {
              Instr RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallFn fn = (CallFn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instr(fn, fnleft , fnright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCTIONS ::= M FUNCTION FUNCTIONS 
            {
              L_Fn RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Function fn = (Function)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_Fn fns = (L_Fn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new L_Fn(fn, fns, fnleft, fnright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCTIONS ::= 
            {
              L_Fn RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCTION ::= ALPHA TYPEVAR ID LPAREN F_ARGS RPAREN LKEY DECLS BEGIN R_INSTRS RKEY 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TypeVar t = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		L_Decls decls = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(!st.addSymbol(new Symbol(id, StructureType.FUNCTION,typeVartoReturnType(t), null, false, false, idleft))){
                            ErrorHandler.addError(ErrorCode.DUPLICATED_FUNCTION,
                            idleft,
                            idright,
                            Phase.SEMANTIC);
                        };
                        sem.checkReturns();
                        RESULT = new Function(t, new Id(id, idleft , idright), args, decls,instrs, idleft , idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCTION ::= ALPHA TYPEVAR ID LPAREN F_ARGS RPAREN LKEY R_INSTRS RKEY 
            {
              Function RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeVar t = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(!st.addSymbol(new Symbol(id, StructureType.FUNCTION,typeVartoReturnType(t), null, false, false, idleft ))){
                            ErrorHandler.addError(ErrorCode.DUPLICATED_FUNCTION,
                            idleft,
                            idright,
                            Phase.SEMANTIC);
                        };
                        sem.checkReturns();
                        RESULT = new Function(t, new Id(id, idleft , idright), args, null, instrs, idleft , idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCTION ::= ALPHA VOID ID LPAREN F_ARGS RPAREN LKEY DECLS BEGIN INSTRS RKEY 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		L_Decls decls = (L_Decls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(!st.addSymbol(new Symbol(id, StructureType.FUNCTION,StructureReturnType.VOID, null, false, false, idleft ))){
                            ErrorHandler.addError(ErrorCode.DUPLICATED_FUNCTION,
                            idleft,
                            idright,
                            Phase.SEMANTIC);
                        };
                        RESULT = new Function(null, new Id(id, idleft , idright), args, decls, instrs, idleft , idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCTION ::= ALPHA VOID ID LPAREN F_ARGS RPAREN LKEY INSTRS RKEY 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		L_Instrs instrs = (L_Instrs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(!st.addSymbol(new Symbol(id, StructureType.FUNCTION,StructureReturnType.VOID, null, false, false, idleft ))){
                            ErrorHandler.addError(ErrorCode.DUPLICATED_FUNCTION,
                            idleft,
                            idright,
                            Phase.SEMANTIC);
                        };
                        RESULT = new Function(null, new Id(id, idleft , idright), args, null, instrs,  idleft , idright);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // F_ARGS ::= F_ARGS2 
            {
              L_FArgs RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = args;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_ARGS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // F_ARGS ::= 
            {
              L_FArgs RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_ARGS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // F_ARGS2 ::= TYPEVAR ID COMMA F_ARGS2 
            {
              L_FArgs RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		L_FArgs args = (L_FArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        st.addSymbol(new Symbol(id, StructureType.PARAMETER, typeVartoReturnType(type), null, false, false, idleft));
                        RESULT = new L_FArgs( new FnArg(type, new Id(id, idleft , idright), cur_token.left , cur_token.right), args, cur_token.left , cur_token.right);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_ARGS2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // F_ARGS2 ::= TYPEVAR ID 
            {
              L_FArgs RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeVar type = (TypeVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        st.addSymbol(new Symbol(id, StructureType.PARAMETER, typeVartoReturnType(type), null, false, false, idleft));
                        RESULT = new L_FArgs( new FnArg(type, new Id(id, idleft , idright), cur_token.left , cur_token.right), null, cur_token.left , cur_token.right);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_ARGS2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
